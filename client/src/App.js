import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';
// Apollo Client stuff
import {
  // Apollo client's factory
  ApolloClient,
  // query generator
  gql,
  // HOC (Higher Order Decorator) decorator
  // "Concretely, a higher-order component is a function that takes a component and returns a new component."
  graphql,
  // injects the Apollo client generated with ApolloClient inside the app
  ApolloProvider,
} from 'react-apollo'

// Apollo mock generator utilities
import {
  makeExecutableSchema,
  addMockFunctionsToSchema
} from 'graphql-tools'
// Apollo network mock interface generator
import { mockNetworkInterfaceWithSchema } from 'apollo-test-utils'

// app custom GQL types
import { typeDefs } from './schema'

// create a mock network interface, because right now we don't have a GQL server
const schema = makeExecutableSchema({ typeDefs })
addMockFunctionsToSchema({ schema })
const mockNetworkInterface = mockNetworkInterfaceWithSchema({ schema })

// the instance of apollo client
const client = new ApolloClient({
  networkInterface: mockNetworkInterface
})

// a simple query that returns a list of channels, with id and name as fields
const channelsListQuery = gql`
   query ChannelsListQuery {
     channels {
       id
       name
     }
   }
 `

// the channels list component
// props are generated by the graphql decorator
const ChannelsList = ({data: {loading, error, channels}}) => {
  // loading is true when GQL is loading the data
  if (loading) {
    return <p>Loading...</p>
  }

  // if an error occur, error is filled
  if (error) {
    return <p>Error: {error.message}</p>
  }

  // the real list
  return <ul>{channels.map(channel => <li key={channel.id}>{channel.id} - {channel.name}</li>)}</ul>
}

// HOC in action: graphql decorator takes the query and then the component
// filling it with the "data" prop (see above)
// this is cool because you don't have to worry about filling components with the query result
const ChannelsListWithData = graphql(channelsListQuery)(ChannelsList)

class App extends Component {
  render() {
    return (
      <ApolloProvider client={client}>
        <div className="App">
          <div className="App-header">
            <img src={logo} className="App-logo" alt="logo" />
            <h2>Welcome to Apollo</h2>
          </div>
          <ChannelsListWithData />
        </div>
      </ApolloProvider>
    );
  }
}

export default App;
